/*
Copyright 2019 Wrangler Sample Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/harvester/harvester-load-balancer/pkg/apis/loadbalancer.harvesterhci.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type LoadBalancerHandler func(string, *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error)

type LoadBalancerController interface {
	generic.ControllerMeta
	LoadBalancerClient

	OnChange(ctx context.Context, name string, sync LoadBalancerHandler)
	OnRemove(ctx context.Context, name string, sync LoadBalancerHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() LoadBalancerCache
}

type LoadBalancerClient interface {
	Create(*v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error)
	Update(*v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error)
	UpdateStatus(*v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.LoadBalancer, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.LoadBalancerList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.LoadBalancer, err error)
}

type LoadBalancerCache interface {
	Get(namespace, name string) (*v1alpha1.LoadBalancer, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.LoadBalancer, error)

	AddIndexer(indexName string, indexer LoadBalancerIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.LoadBalancer, error)
}

type LoadBalancerIndexer func(obj *v1alpha1.LoadBalancer) ([]string, error)

type loadBalancerController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewLoadBalancerController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) LoadBalancerController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &loadBalancerController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromLoadBalancerHandlerToHandler(sync LoadBalancerHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.LoadBalancer
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.LoadBalancer))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *loadBalancerController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.LoadBalancer))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateLoadBalancerDeepCopyOnChange(client LoadBalancerClient, obj *v1alpha1.LoadBalancer, handler func(obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error)) (*v1alpha1.LoadBalancer, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *loadBalancerController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *loadBalancerController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *loadBalancerController) OnChange(ctx context.Context, name string, sync LoadBalancerHandler) {
	c.AddGenericHandler(ctx, name, FromLoadBalancerHandlerToHandler(sync))
}

func (c *loadBalancerController) OnRemove(ctx context.Context, name string, sync LoadBalancerHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromLoadBalancerHandlerToHandler(sync)))
}

func (c *loadBalancerController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *loadBalancerController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *loadBalancerController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *loadBalancerController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *loadBalancerController) Cache() LoadBalancerCache {
	return &loadBalancerCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *loadBalancerController) Create(obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error) {
	result := &v1alpha1.LoadBalancer{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *loadBalancerController) Update(obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error) {
	result := &v1alpha1.LoadBalancer{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *loadBalancerController) UpdateStatus(obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error) {
	result := &v1alpha1.LoadBalancer{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *loadBalancerController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *loadBalancerController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.LoadBalancer, error) {
	result := &v1alpha1.LoadBalancer{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *loadBalancerController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.LoadBalancerList, error) {
	result := &v1alpha1.LoadBalancerList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *loadBalancerController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *loadBalancerController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.LoadBalancer, error) {
	result := &v1alpha1.LoadBalancer{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type loadBalancerCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *loadBalancerCache) Get(namespace, name string) (*v1alpha1.LoadBalancer, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.LoadBalancer), nil
}

func (c *loadBalancerCache) List(namespace string, selector labels.Selector) (ret []*v1alpha1.LoadBalancer, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoadBalancer))
	})

	return ret, err
}

func (c *loadBalancerCache) AddIndexer(indexName string, indexer LoadBalancerIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.LoadBalancer))
		},
	}))
}

func (c *loadBalancerCache) GetByIndex(indexName, key string) (result []*v1alpha1.LoadBalancer, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.LoadBalancer, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.LoadBalancer))
	}
	return result, nil
}

type LoadBalancerStatusHandler func(obj *v1alpha1.LoadBalancer, status v1alpha1.LoadBalancerStatus) (v1alpha1.LoadBalancerStatus, error)

type LoadBalancerGeneratingHandler func(obj *v1alpha1.LoadBalancer, status v1alpha1.LoadBalancerStatus) ([]runtime.Object, v1alpha1.LoadBalancerStatus, error)

func RegisterLoadBalancerStatusHandler(ctx context.Context, controller LoadBalancerController, condition condition.Cond, name string, handler LoadBalancerStatusHandler) {
	statusHandler := &loadBalancerStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromLoadBalancerHandlerToHandler(statusHandler.sync))
}

func RegisterLoadBalancerGeneratingHandler(ctx context.Context, controller LoadBalancerController, apply apply.Apply,
	condition condition.Cond, name string, handler LoadBalancerGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &loadBalancerGeneratingHandler{
		LoadBalancerGeneratingHandler: handler,
		apply:                         apply,
		name:                          name,
		gvk:                           controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterLoadBalancerStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type loadBalancerStatusHandler struct {
	client    LoadBalancerClient
	condition condition.Cond
	handler   LoadBalancerStatusHandler
}

func (a *loadBalancerStatusHandler) sync(key string, obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type loadBalancerGeneratingHandler struct {
	LoadBalancerGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *loadBalancerGeneratingHandler) Remove(key string, obj *v1alpha1.LoadBalancer) (*v1alpha1.LoadBalancer, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.LoadBalancer{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *loadBalancerGeneratingHandler) Handle(obj *v1alpha1.LoadBalancer, status v1alpha1.LoadBalancerStatus) (v1alpha1.LoadBalancerStatus, error) {
	objs, newStatus, err := a.LoadBalancerGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
